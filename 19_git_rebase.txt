=======================
git rebase Command
=======================

📌 What is `git rebase`?
----------------------------
`git rebase` is used to **move or combine a sequence of commits** to a new base commit. It allows you to "replay" your changes on top of another branch.

It helps:
- Keep history linear and clean
- Integrate changes from one branch into another

---

🧠 Why Use Rebase?
----------------------------
✅ Makes project history easier to read  
✅ Useful for feature branches to stay up-to-date  
✅ Avoids unnecessary merge commits  
✅ Rewrites commit history for cleaner collaboration

---

🛠️ How to Use `git rebase`
--------------------------------

1️⃣ Rebase your feature branch with the latest `main`:
        git checkout feature-branch
        git rebase main


2️⃣ If conflicts occur, resolve them, then:
        git add .
        git rebase --continue

3️⃣ To abort rebase and return to previous state:
        git rebase --abort

📂 Example Scenario
You’ve been working on feature-1 but main has new commits.
        git checkout feature-1
        git fetch origin
        git rebase origin/main
Now your feature commits are placed on top of the updated main branch.

🔁 Rebase vs Merge
Feature	                     Merge	                         Rebase
------------------|-------------------------------|------------------------------
History 	        Creates a merge commit	        Linear, clean history
Collaboration	        Safer for shared branches	Best for local/private branches
Conflict Handling	Happens once	                Might occur multiple times
Command	                git merge main	                git rebase main

📦 Rebase After Pulling
If you want to pull and rebase in one step:
        git pull --rebase origin main
This avoids unnecessary merge commits during pulls.

⚠️ Caution:
        Avoid rebasing public/shared branches that others are working on, as it rewrites history.
        Use rebase mainly for local feature branches.

✅ Summary
🔸 git rebase = replays your commits on a new base
🔸 Cleaner history, no extra merge commits
🔸 Great for local branches before merging
🔸 Use --continue, --abort, and resolve conflicts if needed
🔸 Avoid on branches others are using

